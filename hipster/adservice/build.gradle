plugins {
    id 'com.google.protobuf' version '0.8.11'
    id 'idea'
    id 'application'
    id 'java'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
}

jar {
    manifest {
        attributes(
                'Class-Path': configurations.runtime.files.collect {"$it.name"}.join(' '),
                'Main-Class': 'com.hipstershop.AdService'
//                'Main-Class': 'com.hipstershop.AdServiceClient'
        )
    }
}
repositories {
    mavenCentral()
    mavenLocal()
}
apply plugin: "com.github.johnrengelman.shadow"
shadowJar {
    mainClassName = 'com.hipstershop.AdService'
//    mainClassName = 'com.hipstershop.AdServiceClient'
    project.archivesBaseName = 'hipstershop'
    archiveClassifier = 'fat'
}


description = 'Ad Service'
group = "adservice"
version = "0.1.0-SNAPSHOT"

def grpcVersion = "1.26.0"
def jacksonVersion = "2.10.2"
def protocVersion = "3.11.4"

tasks.withType(JavaCompile) {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

ext {
    speed = project.hasProperty('speed') ? project.getProperty('speed') : false
    offlineCompile = new File("$buildDir/output/lib")
}

dependencies {
    if (speed) {
        implementation fileTree(dir: offlineCompile, include: '*.jar')
    } else {

        implementation "com.google.api.grpc:proto-google-common-protos:1.17.0",
                "io.grpc:grpc-protobuf:${grpcVersion}",
                "io.grpc:grpc-stub:${grpcVersion}",
                "io.grpc:grpc-netty:${grpcVersion}",
                "io.grpc:grpc-services:${grpcVersion}",
                "io.grpc:grpc-core:${grpcVersion}",
                "io.grpc:grpc-api:${grpcVersion}",
                "javax.annotation:javax.annotation-api:1.3.2",
                "org.apache.logging.log4j:log4j-core:2.13.0",
                "org.springframework:spring-jdbc:4.0.6.RELEASE",
                "mysql:mysql-connector-java:8.0.18"

        runtimeOnly "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}",
                "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}",
                "io.netty:netty-tcnative-boringssl-static:2.0.26.Final"
    }
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${protocVersion}"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
        ofSourceSet('main')
    }
}

 //Inform IDEs like IntelliJ IDEA, Eclipse or NetBeans about the generated code.
sourceSets {
    main {
        java {
            srcDirs 'hipstershop'
            srcDirs 'build/generated/source/proto/main/java/hipstershop'
            srcDirs 'build/generated/source/proto/main/grpc/hipstershop'
        }
    }
}

startScripts.enabled = false

// This to cache dependencies during Docker image building. First build will take time.
// Subsequent build will be incremental.
task downloadRepos(type: Copy) {
    from configurations.compile
    into offlineCompile
    from configurations.runtime
    into offlineCompile
}

task adService(type: CreateStartScripts) {
    mainClassName = 'hipstershop.AdService'
    applicationName = 'AdService'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
    defaultJvmOpts =
            [
             "-agentpath:/opt/cprof/profiler_java_agent.so=-cprof_service=adservice,-cprof_service_version=1.0.0"]
}

applicationDistribution.into('bin') {
    from(adService)
    fileMode = 0755
}
